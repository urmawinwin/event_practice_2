body{
    margin: 0;
    padding: 0;
}

#section1{
    height: 100vh;
    background-image: url(./assets/sec1/subing_bg_4.png);
    background-size: 100%;
    /* background-color: rgb(200, 200, 200); */
}

#section1 .wrapper .content img{
    width: 20%;
}

/* //sec1 */

#section2{
}

#section2 .wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 180vh;
    background-color:rgb(0, 98, 255);
  }
  

#section2 .wrapper .content .starWars{
    background-color: black;
    color: white;
    font-size: 50px;
    width: 830px;
}

#section2 .wrapper .content .subinSwiper{
    background-color: bisque;
    height: 800px;
    width: 560px;
    margin-top: 200px;
}

#section2 .wrapper .content .subinSwiper img{
    /* width: 450px;
    height: 70vh; */
    padding: 3rem;
}

/* #section2 .wrapper .content {
    font-family: system-ui, serif;
    font-size: 2rem;
    width: 450px;
    height: 70vh;
    padding: 3rem;
    border-radius: 1.8rem;
    background: white;
  } */

/* //sec2 */

#section3{
}

#section3 .wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-color: palegreen;
  }

#section3 .bannerTt{
    background-color: black;
    color: white;
    width: 100%;
    text-align: center;
    padding: 50px 0;
}

#section3 .bannerTt h1{
    font-size: 50px;
    margin: 0;
    padding: 0;
}

#section3 .bannerTt {
    font-size: 33px;
    font-weight: bold;
}
    
  
#section3 .wrapper .content {
    font-family: system-ui, serif;
    font-size: 2rem;
    width: 450px;
    height: 70vh;
    padding: 3rem;
    border-radius: 1rem;
    background: white;
  }
/* 엘리먼트를 화면 중앙에 배치할 때 Flexbox와 Grid의 공통점은
해당 엘리먼트가 아닌 부모 엘리먼트을 대상으로 스타일을 적용한다는 것입니다.
그리고 자세히 보시면 두 가지 방법에서
모두 부모 엘리먼트의 min-height 속성을 100vh로 설정해주고 있는데요.
이렇게 스타일하지 않으면 부모 엘리먼트의 높이가
컨텐츠 높이만큼 자치하기 때문에
수평으로 정렬되는 효과만 나타나게 되오니 주의 바랍니다. */
/* //sec3 */


