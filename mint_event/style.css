body {
  margin: 0;
  padding: 0;
}

#section1 {
  position: relative;
  height: 100vh;
  background-image: url(./assets/sec1/subing_bg_4.png);
  background-size: 100%;
  /* background-color: rgb(200, 200, 200); */
}

#section1 .wrapper .content img {
  position: absolute;
  bottom: 0px;
  left: 265px;
  width: 546px;
  /* width: 250px; */
  transform: translate(20px 30px);
}

#section1 .wrapper .content img.gif_down {
  position: absolute;
  bottom: -91px;
  left: 25px;
  width: 391px;
  /* width: 250px; */
  transform: translate(20px 30px);
}

#section1 .wrapper .content img.gif_up {
  position: absolute;
  bottom: -64px;
  left: 742px;
  width: 422px;
  rotate: 15px;
  /* width: 250px; */
  transform: translate(20px 30px);
  z-index: 90;
}

/* //sec1 */

#section2 {
  position: relative;
  height: 175vh;
  background-image: url(./assets/sec2/sec_space_4.jpg);
  background-size: 100%;
  /* background-color: rgb(200, 200, 200); */
}

audio {
  display: none;
  color: gold;
}

.logo {
  position: absolute;
}

.scene-wrapper {
  height: 50vh;
  overflow: hidden;
  position: absolute;
  width: 50vw;
  left: 25vw;
  top: 30vh;
}

.scene {
  position: absolute;
  bottom: 0;
  left: 50%;
  height: 150rem;
  font-weight: bold;
  font-size: 3rem;
  width: 90%;
  text-align: justify;
  overflow: hidden;
  color: gold;
}

.scene__text {
  animation-name: text-move;
  animation-duration: 60s;
  animation-timing-function: linear;
}

.scene {
  transform-origin: 0% 105%;
  transform: perspective(220px) translateX(-50%) rotateX(10deg);
  color: gold;
}

.scene__text {
  animation-name: text-move;
  animation-duration: 60s;
  animation-timing-function: linear;
}

@keyframes text-move {
  from {
    transform: translateY(2500px);
  }
  to {
    transform: translateY(-6000px);
  }
}

/* //starWars */

.swiper-container {
  position: absolute;
  bottom: 160px;
  width: 100%;
  padding-top: 50px;
  padding-bottom: 50px;
}

.swiper-slide {
  background-position: center;
  background-size: cover;
  background-color: white;
  width: 300px;
  height: 430px;
}

/* .swiper-slide .img,
.swiper-slide .img img {
  width: 100%;
  height: 00px;
} */

.swiper-slide .content {
  width: 100%;
  text-align: center;
}

/* //swiper */

/* //sec2 */

#section3 {
}

#section3 .wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: palegreen;
}

#section3 .bannerTt {
  background-color: black;
  color: white;
  width: 100%;
  text-align: center;
  padding: 50px 0;
}

#section3 .bannerTt h1 {
  font-size: 50px;
  margin: 0;
  padding: 0;
}

#section3 .bannerTt {
  font-size: 33px;
  font-weight: bold;
}

#section3 .wrapper .content {
  font-family: system-ui, serif;
  font-size: 2rem;
  width: 450px;
  height: 70vh;
  padding: 3rem;
  border-radius: 1rem;
  background: white;
}
/* 엘리먼트를 화면 중앙에 배치할 때 Flexbox와 Grid의 공통점은
해당 엘리먼트가 아닌 부모 엘리먼트을 대상으로 스타일을 적용한다는 것입니다.
그리고 자세히 보시면 두 가지 방법에서
모두 부모 엘리먼트의 min-height 속성을 100vh로 설정해주고 있는데요.
이렇게 스타일하지 않으면 부모 엘리먼트의 높이가
컨텐츠 높이만큼 자치하기 때문에
수평으로 정렬되는 효과만 나타나게 되오니 주의 바랍니다. */
/* //sec3 */

#section4 {
}

#section4 .wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: palegreen;
}

#section4 .bannerTt {
  background-color: black;
  color: white;
  width: 100%;
  text-align: center;
  padding: 50px 0;
}

#section4 .bannerTt h1 {
  font-size: 50px;
  margin: 0;
  padding: 0;
}

#section4 .bannerTt {
  font-size: 33px;
  font-weight: bold;
}

#section4 .wrapper .content {
  font-family: system-ui, serif;
  font-size: 2rem;
  width: 450px;
  height: 70vh;
  padding: 3rem;
  border-radius: 1rem;
  background: white;
}
/* 엘리먼트를 화면 중앙에 배치할 때 Flexbox와 Grid의 공통점은
해당 엘리먼트가 아닌 부모 엘리먼트을 대상으로 스타일을 적용한다는 것입니다.
그리고 자세히 보시면 두 가지 방법에서
모두 부모 엘리먼트의 min-height 속성을 100vh로 설정해주고 있는데요.
이렇게 스타일하지 않으면 부모 엘리먼트의 높이가
컨텐츠 높이만큼 자치하기 때문에
수평으로 정렬되는 효과만 나타나게 되오니 주의 바랍니다. */
/* //sec4 */

#section5 {
}

#section5 .wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: palegreen;
}

#section5 .bannerTt {
  background-color: black;
  color: white;
  width: 100%;
  text-align: center;
  padding: 50px 0;
}

#section5 .bannerTt h1 {
  font-size: 50px;
  margin: 0;
  padding: 0;
}

#section5 .bannerTt {
  font-size: 33px;
  font-weight: bold;
}

#section5 .wrapper .content {
  font-family: system-ui, serif;
  font-size: 2rem;
  width: 450px;
  height: 70vh;
  padding: 3rem;
  border-radius: 1rem;
  background: white;
}
/* 엘리먼트를 화면 중앙에 배치할 때 Flexbox와 Grid의 공통점은
해당 엘리먼트가 아닌 부모 엘리먼트을 대상으로 스타일을 적용한다는 것입니다.
그리고 자세히 보시면 두 가지 방법에서
모두 부모 엘리먼트의 min-height 속성을 100vh로 설정해주고 있는데요.
이렇게 스타일하지 않으면 부모 엘리먼트의 높이가
컨텐츠 높이만큼 자치하기 때문에
수평으로 정렬되는 효과만 나타나게 되오니 주의 바랍니다. */
/* //sec5 */

#section6 {
}

#section6 .wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 73vh;
  background-color: palegreen;
}

#section1 .wrapper .content img.gif_qna {
  position: absolute;
  bottom: -20px;
  left: 480px;
  width: 500px;
  /* width: 250px; */
  transform: translate(20px 30px);
}

#section6 .bannerTt {
  background-color: mediumseagreen;
  color: white;
  width: 100%;
  text-align: center;
  padding: 70px 0;
}

#section6 .bannerTt h1 {
  font-size: 50px;
  margin: 0;
  padding: 0;
}

#section6 .bannerTt {
  font-size: 33px;
  font-weight: bold;
}

#section6 .wrapper .content {
  font-family: system-ui, serif;
  font-size: 2rem;
  width: 850px;
  height: 40vh;
  padding: 3rem;
  border-radius: 1rem;
  background: black;
  color: white;
  text-align: center;
}

#section6 .wrapper .content strong {
  color: mediumspringgreen;
}

/* 엘리먼트를 화면 중앙에 배치할 때 Flexbox와 Grid의 공통점은
해당 엘리먼트가 아닌 부모 엘리먼트을 대상으로 스타일을 적용한다는 것입니다.
그리고 자세히 보시면 두 가지 방법에서
모두 부모 엘리먼트의 min-height 속성을 100vh로 설정해주고 있는데요.
이렇게 스타일하지 않으면 부모 엘리먼트의 높이가
컨텐츠 높이만큼 자치하기 때문에
수평으로 정렬되는 효과만 나타나게 되오니 주의 바랍니다. */
/* //sec6 */
